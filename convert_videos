#!/bin/sh

# options
input='input/input.avi'
watermark='img/watermark.png'
outro_img='img/outro.jpg'
outro_duration=150
fade_duration=50
quality=5                         # 1 is best, 31 is worst

# tmp files
outro='tmp/outro.mpg'
temp='tmp/temp.mpg'
master='tmp/master.mpg'
temp_mp4='tmp/temp.mp4'

# output files
thumb='output/large_thumb.jpg'
mp4_1280='output/1280.mp4'
ogv_1280='output/1280.ogv'
mp4_360='output/360.mp4'
ogv_360='output/360.ogv'

# calculate the total number of frames (required for fade in/out)
frames=`tcprobe -i $input | grep -o -P "(?<=\blength:\s)(\w+)"`
offset=`expr $frames - $fade_duration`
outro_offset=`expr $outro_duration - $fade_duration`



#-----------------------------------------------------------------------------#
# PRE-PROCESSING
#-----------------------------------------------------------------------------#


# create an outro mpeg from a jpeg (only required once)
ffmpeg -loop_input -vframes $outro_duration -i $outro_img -vf \
  "scale=1280:960, fade=in:0:$fade_duration, fade=out:$outro_offset:$fade_duration" \
  -r 30 -qscale $quality $outro

# create an temp mpeg with watermark and fade in from input
ffmpeg -i $input -vf \
  "movie=$watermark [logo]; [in][logo] overlay=main_w-overlay_w-10:main_h-overlay_h-10, fade=in:0:$fade_duration, fade=out:$offset:$fade_duration [out]" \
  -r 30 -qscale $quality $temp

# join the input with the outro
cat $temp $outro > $master

# grab a thumbnail image from 10 seconds in
ffmpeg -i $master -f image2 -ss 10 -vframes 1 $thumb



#-----------------------------------------------------------------------------#
# OUTPUT
#-----------------------------------------------------------------------------#

# 1280x960 .mp4
ffmpeg -i $master -s 1280x960 -acodec libfaac -aq 100 -vcodec libx264 -preset slow -crf 25 -threads 0 $temp_mp4
qt-faststart $temp_mp4 $mp4_1280

# 1280x960 .ogv
ffmpeg2theora $mp4_1280 --optimize -o $ogv_1280

# 360x270 .mp4
ffmpeg -i $mp4_1280 -s 360x270 -acodec libfaac -aq 100 -vcodec libx264 -preset slow -crf 25 -threads 0 $mp4_360

# 360x270 .ogv
ffmpeg2theora $mp4_360 --optimize -o $ogv_360

